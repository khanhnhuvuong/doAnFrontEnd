import React, {useRef, useState} from "react";
import './chatApp.css';

import {
    MDBTextArea,
    MDBBtn, MDBCardBody, MDBIcon,
} from "mdb-react-ui-kit";
import {getStorage, ref, uploadBytes, getDownloadURL} from "firebase/storage";
import {initializeApp} from "firebase/app";

export default function TextArea({handleSendMessage}) {
    const [mess, setMess] = useState('');
    const fileInputImage = useRef();
    const [showEmojiPicker, setShowEmojiPicker] = useState(false);
    const [selectedEmoji, setSelectedEmoji] = useState('');
    const [selectedEmojis, setSelectedEmojis] = useState([]);
    const [imagePreview, setImagePreview] = useState(null);
    const firebaseConfig = {
        apiKey: "AIzaSyCaOLY5fIOYCW2NBSZkkaY9Dt3QJhp7J8Y",
        authDomain: "appchat-efb9e.firebaseapp.com",
        projectId: "appchat-efb9e",
        storageBucket: "appchat-efb9e.appspot.com",
        messagingSenderId: "809554332860",
        appId: "1:809554332860:web:667caf7cfd4c41021d94b9"
    };

    //Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const storage = getStorage(app);

    const emojiList = [
        "üòä", "üòÑ", "üòÉ", "üòâ", "üòç", "ü•∞", "üòò", "üòé", "üòú", "üòÇ", "ü§£", "üòá", "üò¥", "ü§´", "üôÑ", "üò∑", "ü§î",
        "üôÇ", "üôÉ", "üòã", "üòö", "üòê", "üòë", "üòÆ", "üòØ", "üò™", "üò´", "üò¥", "üòù", "üòõ", "ü§™", "ü§®", "üòï", "üòü",
        "üôÅ", "üò§", "üò†", "üò°", "ü§¨", "üòì", "ü§•", "ü§¢", "ü§Æ", "ü§ß", "ü•µ", "ü•∂", "üò±", "üò®", "üò∞", "üò•", "üò≠",
        "üò¢", "üòì", "üò§", "üò©", "ü§Ø", "üò≥", "ü•¥", "üò¨", "ü§≠", "ü§´", "ü§î", "ü§ê", "üôÑ", "üò∑", "ü§í", "ü§ï", "ü§ë",
        "ü§†", "üòá", "ü•≥", "ü•∫", "ü§°", "ü§ì", "üòé", "ü§ñ", "üëΩ", "üëæ", "ü§°", "üí©", "üëª", "üíÄ", "üë∫", "üëπ", "üëø"
    ];


    function handleClickSend() {
        if (mess !== '') {
            const messageWithEmojis = selectedEmojis.length > 0 ? `${mess}${selectedEmojis.join('')}` : mess;
            handleSendMessage(messageWithEmojis);
            setMess('');
            setSelectedEmojis([]);
        }
    }

    function handleSendIcon() {
        if (selectedEmojis.length > 0) {
            handleSendMessage(selectedEmojis.join(''));
            setSelectedEmojis([]);
            setShowEmojiPicker(false);
        }
    }

    function handleKeyPress(e) {
        if (e.key === 'Enter') {
            handleClickSend();
            handleSendIcon();
        }
    }

    function handleKeyDown(e) {
        if (e.key === 'Backspace' && selectedEmojis.length > 0) {
            const updatedEmojis = [...selectedEmojis];
            updatedEmojis.pop(); // X√≥a bi·ªÉu t∆∞·ª£ng cu·ªëi c√πng
            setSelectedEmojis(updatedEmojis);
        }
    }

    function handleUploadImage(img) {
        const file = img.target.files[0];
        const storage = getStorage();
        const storageRef = ref(storage, "images/" + file.name); // S·ª≠ d·ª•ng child() ƒë·ªÉ t·∫°o th∆∞ m·ª•c con

        uploadBytes(storageRef, file)
            .then((snapshot) => {
                console.log("Upload complete");
                // L·∫•y ƒë∆∞·ªùng d·∫´n t·∫£i xu·ªëng
                return getDownloadURL(snapshot.ref);

            })
            .then((downloadURL) => {
                // Handle vi·ªác hi·ªÉn th·ªã h√¨nh ·∫£nh trong chatBox
                console.log("Download URL:", downloadURL);

                // G·ª≠i ƒë∆∞·ªùng d·∫´n t·∫£i xu·ªëng ƒë·∫øn h√†m handleSendMessage ƒë·ªÉ hi·ªÉn th·ªã trong chatBox
                handleSendMessage(downloadURL);
                setImagePreview(downloadURL); // Hi·ªÉn th·ªã h√¨nh ·∫£nh ƒë√£ t·∫£i l√™n

                // C·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa mess (n·∫øu c·∫ßn)
                // setMess(downloadURL);
            })
            .catch((error) => {
                console.error("Upload error:", error);
                // X·ª≠ l√Ω l·ªói n·∫øu c·∫ßn
            });
    }

    return (
        <div style={{width: '800px', display: 'flex'}}>
            <input
                style={{width: "800px", height: '40px'}}
                label="Message"
                id="textAreaExample"
                value={selectedEmojis.length > 0 ? `${mess}${selectedEmojis.join('')}` : mess}
                onChange={(e) => setMess(e.target.value)}
                onKeyPress={handleKeyPress}
                onKeyDown={handleKeyDown}
            />
            <input
                type="file"
                style={{display: "none"}}
                ref={fileInputImage}
                onChange={handleUploadImage}
            />
            <a className="ms-3 text-muted"
               style={{marginTop: '5px'}}
               onClick={() => fileInputImage.current.click()}>
                <MDBIcon fas icon="paperclip"/>
            </a>
            <a className="ms-3 text-muted"
               style={{marginTop: '5px'}}
               onClick={() => setShowEmojiPicker(!showEmojiPicker)}>
                <MDBIcon fas icon="smile"/>
            </a>
            <a className="ms-3" onClick={handleClickSend}
               style={{marginTop: '5px', color: '#3b71ca'}}>
                <MDBIcon fas icon="paper-plane"/>
            </a>
            {showEmojiPicker && (
                <div className="emoji-picker">
                    {emojiList.map((emoji, index) => (
                        <span
                            style={{cursor: 'pointer'}}
                            key={index}
                            className={`emoji ${selectedEmoji === emoji ? "selected" : ""}`}
                            onClick={() => {
                                if (selectedEmojis.includes(emoji)) {
                                    setSelectedEmojis(selectedEmojis.filter((item) => item !== emoji));
                                } else {
                                    setSelectedEmojis([...selectedEmojis, emoji]);
                                }
                            }}
                        >
                    {emoji}
                        </span>
                    ))}
                </div>
            )}
        </div>
    );
}