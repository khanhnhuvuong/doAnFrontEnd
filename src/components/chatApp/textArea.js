import React, {useRef, useState} from "react";
import {MDBIcon, MDBTextArea} from "mdb-react-ui-kit";
import data from '@emoji-mart/data';
import Picker from '@emoji-mart/react';

function TextArea({handleSendMessage, selectedUser}) {
    const [message, setMessage] = useState("");
    const fileInputImage = useRef();
    const [showEmojiPicker, setShowEmojiPicker] = useState(false);
    const [selectedEmoji, setSelectedEmoji] = useState('');
    const [selectedEmojis, setSelectedEmojis] = useState([]);
    const emojiList = [
        "üòä", "üòÑ", "üòÉ", "üòâ", "üòç", "ü•∞", "üòò", "üòé", "üòú", "üòÇ", "ü§£", "üòá", "üò¥", "ü§´", "üôÑ", "üò∑", "ü§î",
        "üôÇ", "üôÉ", "üòã", "üòö", "üòê", "üòë", "üòÆ", "üòØ", "üò™", "üò´", "üò¥", "üòù", "üòõ", "ü§™", "ü§®", "üòï", "üòü",
        "üôÅ", "üò§", "üò†", "üò°", "ü§¨", "üòì", "ü§•", "ü§¢", "ü§Æ", "ü§ß", "ü•µ", "ü•∂", "üò±", "üò®", "üò∞", "üò•", "üò≠",
        "üò¢", "üòì", "üò§"];

    const handleMessageChange = (event) => {
        setMessage(event.target.value);
    };

    // const handleSendMessage = () => {
    //     handleSendMessage(message);
    // };

    if (!selectedUser) {
        return null; // ·∫®n trang TextArea khi kh√¥ng c√≥ selectedMess
    }

    function handleClickSend() {
        if (message !== '') {
            handleSendMessage(message);
            setMessage('');
        }
    }
        function handleSendIcon() {
            if (selectedEmojis.length > 0) {
                handleSendMessage(selectedEmojis.join(''));
                setSelectedEmojis([]);
                setShowEmojiPicker(false);
            }
        }

    function handleKeyPress(e) {
        if (e.key === 'Enter') {
            handleClickSend();
        }
    }

    function handleUploadImage(img) {
        const file = img.target.files[0];
        const reader = new FileReader();

        reader.onload = function (e) {
            const base64Image = e.target.result;

            handleSendMessage(base64Image);

            setMessage(""); // C·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa mess sau khi g·ª≠i tin nh·∫Øn
        };
        reader.readAsDataURL(file);
    }


    return (
        <div style={{width: '732px', display: 'flex'}}>
            <input
                style={{ width: "800px", height: '40px'}}
                label="Message"
                id="textAreaExample"
                value={selectedEmojis.length > 0 ? `${message}${selectedEmojis.join('')}` : message}
                onChange={(e) => setMessage(e.target.value)}
                onKeyPress={handleKeyPress}

            />
            <input
                type="file"
                style={{display: "none"}}
                ref={fileInputImage}
                onChange={handleUploadImage}
            />
            <a className="ms-3 text-muted"
               style={{marginTop: '5px'}}
               onClick={() => fileInputImage.current.click()}>
                <MDBIcon fas icon="paperclip"/>
            </a>
            <a className="ms-3 text-muted"
               style={{marginTop: '5px'}}
               onClick={() => setShowEmojiPicker(!showEmojiPicker)}>
                <MDBIcon fas icon="smile"/>
            </a>
            <a className="ms-3" onClick={handleSendIcon}
               style={{marginTop: '5px', color: '#3b71ca'}}>
                <MDBIcon fas icon="paper-plane"/>
            </a>
            {showEmojiPicker && (
                <div className="emoji-picker">
                    {emojiList.map((emoji, index) => (
                        <span
                            style={{cursor: 'pointer'}}
                            key={index}
                            className={`emoji ${selectedEmoji ===emoji ? "selected" : ""}`}
                            onClick={() => {
                                if (selectedEmojis.includes(emoji)) {
                                    setSelectedEmojis(selectedEmojis.filter((item) => item !== emoji));
                                } else {
                                    setSelectedEmojis([...selectedEmojis, emoji]);
                                }
                            }}
                        >
                    {emoji}
                            </span>
                    ))}
                </div>
            )}
        </div>
    );
}

export default TextArea;
